/* ------------------------------------------------------------------
 Mixin
------------------------------------------------------------------ */
// font
@use "sass:math";
@mixin gothic {
  // font-family: "游ゴシック体", YuGothic, "游ゴシック Medium", "Yu Gothic Medium", "游ゴシック", "Yu Gothic", sans-serif;
  // font-family: -apple-system ,YuGothic, "Yu Gothic Medium", "Yu Gothic", Meiryo, sans-serif;
  // font-family: -apple-system, BlinkMacSystemFont, Roboto, "Segoe UI", "Helvetica Neue", HelveticaNeue, YuGothic, "Yu Gothic Medium", "Yu Gothic", Verdana, Meiryo, sans-serif;
  font-family: "Zen Kaku Gothic New", sans-serif;
}

@mixin sansserif {
  font-family: "Heebo", sans-serif;
}

// box-shadow
@mixin shadow {
  box-shadow: 0 0 18px 0 rgba(#080808, 0.54);
}

// ライン
@mixin hoverLine($color: $text-color, $first: false) {
  @include bp(pc) {
    position: relative;
    @if $first {
      a:hover &,
      &:hover {
        &::before {
          animation: 0.8s line-in-out cubic-bezier(0.65, 0, 0.35, 1) both;
        }
      }
      &::before {
        content: "";
        display: block;
        position: absolute;
        bottom: -2px;
        width: 100%;
        height: 1px;
        background-color: $color;
        transform: scaleX(1);
        transition: none;
        opacity: 1;
      }
    } @else {
      a:hover &,
      &:hover {
        &::before {
          transform: scaleX(1);
          transform-origin: left top;
          opacity: 1;
          transition:
            transform 0.5s cubic-bezier(0.65, 0, 0.35, 1),
            opacity 0.1s;
        }
      }
      &::before {
        content: "";
        display: block;
        position: absolute;
        bottom: -2px;
        width: 100%;
        height: 1px;
        background-color: $color;
        transform: scaleX(0);
        opacity: 0;
        transform-origin: right top;
        transition:
          transform 0.5s cubic-bezier(0.65, 0, 0.35, 1),
          opacity 0.1s 0.5s;
      }
    }
  }

  @keyframes line-in-out {
    0% {
      transform-origin: right top;
    }

    50% {
      transform: scaleX(0);
      transform-origin: right top;
    }
    51% {
      transform-origin: left top;
      transform: scaleX(0);
    }
    100% {
      transform: scaleX(1);
      transform-origin: left top;
    }
  }
}

// ボタンアニメ
@mixin btnAnm {
  @keyframes iconBlank {
    0% {
      transform: translateX(0);
      opacity: 1;
    }
    50% {
      transform: translateX(10px);
      opacity: 0;
    }
    51% {
      transform: translateX(-10px);
      opacity: 0;
    }
    100% {
      transform: translateX(0);
      opacity: 1;
    }
  }
  animation: iconBlank 0.5s cubic-bezier(0.5, 1, 0.89, 1) both;
}

// position center
@mixin pCenter($direction: "") {
  position: absolute;
  @if $direction == "" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  @if $direction == xy {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if $direction==x {
    left: 50%;
    transform: translateX(-50%);
  } @else if $direction==y {
    top: 50%;
    transform: translateY(-50%);
  }
}
// flexbox center
@mixin fCenter($direction: "") {
  display: flex;
  @if $direction == "" {
    justify-content: center;
    align-items: center;
  }
  @if $direction == "xy" {
    justify-content: center;
    align-items: center;
  }
  @if $direction == "x" {
    justify-content: center;
  }
  @if $direction == "y" {
    align-items: center;
  }
}
// bg center
@mixin bgCenter {
  background-position: center;
  background-repeat: no-repeat;
}
// anchor hover
@mixin aHover {
  @include bp(pc) {
    transition: opacity 0.3s;
    &:hover {
      opacity: 0.8;
    }
  }
} // H1〜H4
@mixin h_style() {
  // 共通
  @include maruGothic();
}
@mixin pc_h($type) {
  @if $type == 1 {
    font-size: 4.6rem;
    line-height: 1.8;
    font-weight: $weight-m;
  } @else if $type == 2 {
    font-size: 4rem;
    line-height: 1.8;
    font-weight: $weight-m;
  } @else if $type == 3 {
    font-size: 2.6rem;
    line-height: 1.6;
    font-weight: $weight-b;
  } @else if $type == 4 {
    font-size: 2.4rem;
    line-height: 1.6;
    letter-spacing: 0.03em;
    font-weight: $weight-b;
  } @else if $type == 5 {
    font-size: 2rem;
    line-height: 1.6;
    font-weight: $weight-b;
  } @else if $type == 6 {
    font-size: 1.8rem;
    line-height: 1.6;
    font-weight: $weight-b;
  }
}
@mixin sp_h($type) {
  @if $type == 1 {
    font-size: 3.4rem;
    line-height: 1.2;
  } @else if $type == 2 {
    font-size: 3rem;
    letter-spacing: 1.2;
  } @else if $type == 3 {
    font-size: 2.5rem;
    line-height: 1.5;
  } @else if $type == 4 {
    font-size: 2.2rem;
    line-height: 1.4;
  } @else if $type == 5 {
    font-size: 2rem;
    line-height: 1.2;
  } @else if $type == 6 {
    font-size: 1.7rem;
    line-height: 1.2;
  }
}

@mixin h($type: "", $wid: "") {
  @for $i from 1 through 6 {
    @if $type == $i {
      @include h_style();
      @if $wid == "" {
        @include pc_h($i);
        @include bp(sp) {
          @include sp_h($i);
        }
      }
      @if $wid == "pc" {
        @include pc_h($i);
      }
      @if $wid == "sp" {
        @include sp_h($i);
      }
    }
  }
}

// text
@mixin txt($type: "", $siz: "") {
  @if $type== "body" {
    font-weight: $weight-b;
    letter-spacing: 0em;
    line-height: 1.6;
    font-size: 1.6rem;
    @if $siz== "" and $siz == main {
      line-height: 1.6;
    } @else if $siz == main_bold {
      font-weight: $weight-b;
    } @else if $siz == main_link {
      text-decoration: underline;
    }
  }
}

// text ellipsis
@mixin ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// line-height
@mixin lh($lh, $fz) {
  line-height: $lh / $fz;
}

// text lineclamp
@mixin lineclamp($num) {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $num;
}

// fonttelo icon font
@mixin fontello($content) {
  font-family: "fontello";
  content: $content;
}
// fontawesome icon font
@mixin fontawesome($content: "", $type: "") {
  @if ($type == "") {
    font-family: "Font Awesome 5 Free";
  } @else if ($type == brands) {
    font-family: "Font Awesome 5 Brands";
  }

  content: #{'"' + "\\" + $content + '"'};
}
// 複数行 アンダーライン
@mixin line($color: #ff0, $height: 65%) {
  background: linear-gradient(transparent $height, $color 0%);
  display: inline;
}

// list width margin
@mixin list($ElmCount, $width, $mtValue) {
  $ElmCountPlusOne: $ElmCount + 1;
  $ElmCountMinusOne: $ElmCount - 1;
  $mlValue: (100% - ($width * $ElmCount)) / $ElmCountMinusOne;
  width: $width;
  &:not(:nth-child(#{$ElmCount}n + 1)) {
    margin-left: $mlValue;
  }
  &:nth-child(n + #{$ElmCountPlusOne}) {
    margin-top: $mtValue;
  }
}
// flex 3row ::after
@mixin flexAfter($colWidth) {
  &::before,
  &::after {
    content: "";
    display: block;
    order: 1;
    width: $colWidth;
  }
}

// formスタイルリセット
@mixin formReset() {
  input,
  button,
  textarea,
  select {
    margin: 0;
    padding: 0;
    background: none;
    border: none;
    border-radius: 0;
    outline: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
  }
}

// browser
@mixin browser($type) {
  @if $type == ie {
    // Internet Explorer
    @media all and (-ms-high-contrast: none) {
      @content;
    }
  }
  @if $type == ff {
    // Firefox
    @-moz-document url-prefix() {
      @content;
    }
  }
  @if $type == ch {
    // google Chrome
    @media screen and (-webkit-min-device-pixel-ratio: 0) {
      @content;
    }
  }
  @if $type == sa {
    // Safari
    @media screen and (-webkit-min-device-pixel-ratio: 0) {
      _::-webkit-full-page-media,
      _:future,
      :root body {
        @content;
      }
    }
  }
}

// Medie Query
@mixin bp($point) {
  @if $point == sp {
    @media (max-width: 839px) {
      @content;
    }
  }

  @if $point == pc {
    @media (min-width: 840px) {
      @content;
    }
  }

  @if $point == full {
    @media (min-width: 1400px) {
      @content;
    }
  }
}

// vw計算
$pc-w: 1440; //pcのデザインカンプの幅を入力
$sp-w: 375; //spのデザインカンプの幅を入力

$propertys: (
  "fz": font-size,
  "w": width,
  "h": height,
  "minW": min-width,
  "minH": min-height,
  "maxW": max-width,
  "maxH": max-height,
  "m": margin,
  "mt": margin-top,
  "mb": margin-bottom,
  "mr": margin-right,
  "ml": margin-left,
  "p": padding,
  "pt": padding-top,
  "pb": padding-bottom,
  "pr": padding-right,
  "pl": padding-left,
  "t": top,
  "b": bottom,
  "r": right,
  "l": left,
  "radius": border-radius,
  "gap": gap,
  "gapR": row-gap,
  "gapC": column-gap,
);

// vw
@mixin vw($pro, $base, $wid: "") {
  @each $name, $property in $propertys {
    @if $pro == $name {
      @if $wid == "" {
        @include bp(pc) {
          #{$property}: calc($base / $pc-w * 100) + vw;
        }
        @include bp(sp) {
          #{$property}: calc($base / $sp-w * 100) + vw;
        }
      }
      @if $wid == pc {
        @include bp(pc) {
          #{$property}: calc($base / $pc-w * 100) + vw;
        }
      }
      @if $wid == sp {
        @include bp(sp) {
          #{$property}: calc($base / $sp-w * 100) + vw;
        }
      }
    }
  }
}

// unquote Clamp

@mixin clamp($pro, $base, $wid: "") {
  $valuePC: unquote(
    "clamp(" + calc($base * 0.8) + "px," + calc($base / $pc-w * 100) + "vw," + ($base * 1.2) + "px)"
  );
  $valueSP: unquote(
    "clamp(" + calc($base * 0.8) + "px," + calc($base / $sp-w * 100) + "vw," + ($base * 1.2) + "px)"
  );

  @each $name, $property in $propertys {
    @if #{$property} == fz {
      @if $base <= 12 {
        $valuePC: unquote(
          "clamp(" + $base + "px," + calc($base / $pc-w * 100) + "vw," + ($base * 1.2) + "px)"
        );
        $valueSP: unquote(
          "clamp(" + $base + "px," + calc($base / $sp-w * 100) + "vw," + ($base * 1.2) + "px)"
        );
      }
    }
    @if $pro == $name {
      @if $wid == "" {
        @include bp(pc) {
          #{$property}: $valuePC;
        }
        @include bp(sp) {
          #{$property}: $valueSP;
        }
      }
      @if $wid == pc {
        @include bp(pc) {
          #{$property}: $valuePC;
        }
      }
      @if $wid == sp {
        @include bp(sp) {
          #{$property}: $valueSP;
        }
      }
    }
  }
}
@mixin max($pro, $base, $wid: "") {
  $valuePC: unquote("max(" + calc($base / $pc-w) * 100 + "vw," + calc($base * 0.73) + "px)");
  $valueSP: unquote("max(" + calc($base / $sp-w * 100) + "vw," + calc($base * 0.73) + "px)");

  @each $name, $property in $propertys {
    @if #{$property} == fz {
      @if $base <= 12 {
        $valuePC: unquote("max(" + calc($base / $pc-w * 100) + "vw," + $base + "px)");
        $valueSP: unquote("max(" + calc($base / $sp-w * 100) + "vw," + $base + "px)");
      }
    }
    @if $pro == $name {
      @if $wid == "" {
        @include bp(pc) {
          #{$property}: $valuePC;
        }
        @include bp(sp) {
          #{$property}: $valueSP;
        }
      }
      @if $wid == pc {
        @include bp(pc) {
          #{$property}: $valuePC;
        }
      }
      @if $wid == sp {
        @include bp(sp) {
          #{$property}: $valueSP;
        }
      }
    }
  }
}
